Данная программа состоит из пакета с реализованным классом tlinker, а так же исполняемым модулем main.py

Для запуска используем main.py, который попросит ввести ссылку (начинающуюся с http или https)

--------------------------------------------

Описание алгоритма :

Программа получает ссылку от пользователя и заносит ее в переменную, для дальнейшей работы.
Создается класс TensLinker и запускается первый метод - parse_link, который открывает ссылку,
считывает весь текст с тегами и тд. Парсит страничку с помощью библиотеки bs4 и осуществляет поиск названия (<title>) и содержание тега <p>
Затем чистит текст с помощью регулярных выражений и возвращает чистый текст

Далее запускается метод text_writer, который использует ссылку, убирает приставки http/s//www. и создает директории исходя из ссылки. 
(используется библиотека os)
Если папки уже созданы, то перехватывает ошибку "FileExistsError" и продолжает работу.

После создания папок, программа создает временный файл temp.txt и начинает его обработку (Ограничивает строку в 80 символов
и переносит по словам)

В завершении создает файл index.txt ( в соответствии с тз), записывает в него отформатированный текст и удаляет врем. файлы.


Ссылки, которые тестировались:
https://lenta.ru/news/2017/01/07/baldwin_trump
https://lenta.ru/news/2017/01/09/bardack
https://lenta.ru/news/2017/01/09/smoke
https://www.gazeta.ru/business/news/2017/01/09/n_9537455.shtml


Проблемы и рекомендации по совершенствованию программы:

Возникли проблемы с реализацией встраивания ссылок непосредственно в текст, где используется гиперссылка.
Возникли проблемы с сайтом газета.ру - Захватывает с текстом  статьи еще и копирайты 
Мне не нравится архитектура ООП, использованная в данной программе.

Я бы продолжил развитие программы в следующем направлении:

1. Усовершенствовать регулярные выражения, которые используются для чистки текста (чувство прекрасного страдает в данный момент).

2. Перестроить архитектуру ООП, где будут созданы классы, в зависимости от сайта в ссылке (Классы шаблонов, к усложнению задачи 2).
После получения ссылки - программа проверяла бы на соответствие шаблонам (классам) и выбирала нужный, если шаблон не существует,
то выбирается по умолчанию.

3. Написать отдельный метод, который перед чисткой текста вытаскивает ссылки и запоминает их расположение, с последующим возвратом.

4. Рассмотрел бы возможность использования баз данных, для хранения уже "Очищенных" ссылок.

PS: Историю разработки можно посмотреть на гитхабе - https://github.com/Tonycrosss/Tensor/tree/Dev 

PSS: Спасибо за задачу, узнал несколько интересных способов обработки и работы со списками!